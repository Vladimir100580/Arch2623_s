
Не все тесты пройдены, есть ошибки :(


Количество затраченных попыток: 2

Время выполнения: 1.43968 сек

Общая статистика
Всего тестов: 4. Пройдено: 0. Не пройдено: 4.

Подробную информацию по каждому тесту смотрите ниже.

Тест 1
Тест не пройден ✗

Формулировка:

* Итоговый код для проверки.


import warnings

warnings.filterwarnings('ignore')

# Введите ваше решение ниже

class Range:
    def __init__(self, min_value: int = None, max_value: int = None):
        self.min_value = min_value
        self.max_value = max_value

    def __set_name__(self, owner, name):    # Инкапсуляция. Добавляем ко всем именам "_"
        self.param_name = '_' + name

    def __get__(self, instance, owner):
        return getattr(instance, self.param_name)

    def __set__(self, instance, value):
        self.validate(value)
        setattr(instance, self.param_name, value)

    def __delete__(self, instance):
        raise AttributeError(f'Свойство "{self.param_name}" нельзя удалять')

    def validate(self, value):
        if not isinstance(value, int):
            raise TypeError(f'Значение {value} должно быть целым числом')

        if self.min_value is not None and value < self.min_value:
            raise ValueError(f'Значение {value} должно быть больше или равно {self.min_value}')

        if self.max_value is not None and value >= self.max_value:
            raise ValueError(f'Значение {value} должно быть меньше {self.max_value}')


class Student:
    age = Range(3, 103)
    grade = Range(1, 11 + 1)
    office = Range(3, 42 + 1)

    def __init__(self, name, age, grade, office):
        self.name = name
        self.age = age
        self.grade = grade
        self.office = office

    def __repr__(self):
        return f'Student(name={self.name}, age={self.age}, grade={self.grade}, office={self.office})'





if __name__ == '__main__':
    std_one = Student('Архимед', 12, 4, 29)
    # std_other = Student('Аристотель', 2406, 5, 17)  # ValueError: Значение 2406 должно быть меньше 103
    print(f'{std_one = }')
    std_one.age = 15
    print(f'{std_one = }')
    # std_one.grade = 11.0  # TypeError: Значение 11.0 должно быть целым числом
    # std_one.office = 73  # ValueError: Значение 73 должно быть меньше 42
    # del std_one.age  # AttributeError: Свойство "_age" нельзя удалять
    print(f'{std_one.__dict__ = }')

#При отправке кода на Выполнение раскомментируйте строку ниже, чтобы задать значения аргументов и вызвать функцию

#При отправке решения на Проверку закомментируйте эту строку обратно - система автоматически подставит разные значения аргументов и вызовет функцию для проверки

#student = Student("Иван Иванов", "subjects.csv")

#student.add_grade("Математика", 4)
#student.add_test_score("Математика", 85)

#student.add_grade("История", 5)
#student.add_test_score("История", 92)

#average_grade = student.get_average_grade()
#print(f"Средний балл: {average_grade}")

#average_test_score = student.get_average_test_score("Математика")
#print(f"Средний результат по тестам по математике: {average_test_score}")

#print(student)


student = Student("Иван Иванов", "subjects.csv")

student.add_grade("Математика", 4)
student.add_test_score("Математика", 85)

student.add_grade("История", 5)
student.add_test_score("История", 92)

average_grade = student.get_average_grade()
print(f"Средний балл: {average_grade}")

average_test_score = student.get_average_test_score("Математика")
print(f"Средний результат по тестам по математике: {average_test_score}")

print(student)


Ожидаемый ответ:

Средний балл: 4.5
Средний результат по тестам по математике: 85.0
Студент: Иван Иванов
Предметы: Математика, История

Ошибка:

Traceback (most recent call last):
  File "LHE4MAOY5WE86P3P2J1X.py", line 88, in <module>
    student = Student("Иван Иванов", "subjects.csv")
TypeError: __init__() missing 2 required positional arguments: 'grade' and 'office'
Тест 2
Тест не пройден ✗

Формулировка:

* Итоговый код для проверки.


import warnings

warnings.filterwarnings('ignore')

# Введите ваше решение ниже

class Range:
    def __init__(self, min_value: int = None, max_value: int = None):
        self.min_value = min_value
        self.max_value = max_value

    def __set_name__(self, owner, name):    # Инкапсуляция. Добавляем ко всем именам "_"
        self.param_name = '_' + name

    def __get__(self, instance, owner):
        return getattr(instance, self.param_name)

    def __set__(self, instance, value):
        self.validate(value)
        setattr(instance, self.param_name, value)

    def __delete__(self, instance):
        raise AttributeError(f'Свойство "{self.param_name}" нельзя удалять')

    def validate(self, value):
        if not isinstance(value, int):
            raise TypeError(f'Значение {value} должно быть целым числом')

        if self.min_value is not None and value < self.min_value:
            raise ValueError(f'Значение {value} должно быть больше или равно {self.min_value}')

        if self.max_value is not None and value >= self.max_value:
            raise ValueError(f'Значение {value} должно быть меньше {self.max_value}')


class Student:
    age = Range(3, 103)
    grade = Range(1, 11 + 1)
    office = Range(3, 42 + 1)

    def __init__(self, name, age, grade, office):
        self.name = name
        self.age = age
        self.grade = grade
        self.office = office

    def __repr__(self):
        return f'Student(name={self.name}, age={self.age}, grade={self.grade}, office={self.office})'





if __name__ == '__main__':
    std_one = Student('Архимед', 12, 4, 29)
    # std_other = Student('Аристотель', 2406, 5, 17)  # ValueError: Значение 2406 должно быть меньше 103
    print(f'{std_one = }')
    std_one.age = 15
    print(f'{std_one = }')
    # std_one.grade = 11.0  # TypeError: Значение 11.0 должно быть целым числом
    # std_one.office = 73  # ValueError: Значение 73 должно быть меньше 42
    # del std_one.age  # AttributeError: Свойство "_age" нельзя удалять
    print(f'{std_one.__dict__ = }')

#При отправке кода на Выполнение раскомментируйте строку ниже, чтобы задать значения аргументов и вызвать функцию

#При отправке решения на Проверку закомментируйте эту строку обратно - система автоматически подставит разные значения аргументов и вызовет функцию для проверки

#student = Student("Иван Иванов", "subjects.csv")

#student.add_grade("Математика", 4)
#student.add_test_score("Математика", 85)

#student.add_grade("История", 5)
#student.add_test_score("История", 92)

#average_grade = student.get_average_grade()
#print(f"Средний балл: {average_grade}")

#average_test_score = student.get_average_test_score("Математика")
#print(f"Средний результат по тестам по математике: {average_test_score}")

#print(student)


student = Student("123 Иван", "subjects.csv")


Ожидаемый ответ:

ValueError: ФИО должно состоять только из букв и начинаться с заглавной буквы

Ваш ответ:

TypeError: __init__() missing 2 required positional arguments: 'grade' and 'office'
Тест 3
Тест не пройден ✗

Формулировка:

* Итоговый код для проверки.


import warnings

warnings.filterwarnings('ignore')

# Введите ваше решение ниже

class Range:
    def __init__(self, min_value: int = None, max_value: int = None):
        self.min_value = min_value
        self.max_value = max_value

    def __set_name__(self, owner, name):    # Инкапсуляция. Добавляем ко всем именам "_"
        self.param_name = '_' + name

    def __get__(self, instance, owner):
        return getattr(instance, self.param_name)

    def __set__(self, instance, value):
        self.validate(value)
        setattr(instance, self.param_name, value)

    def __delete__(self, instance):
        raise AttributeError(f'Свойство "{self.param_name}" нельзя удалять')

    def validate(self, value):
        if not isinstance(value, int):
            raise TypeError(f'Значение {value} должно быть целым числом')

        if self.min_value is not None and value < self.min_value:
            raise ValueError(f'Значение {value} должно быть больше или равно {self.min_value}')

        if self.max_value is not None and value >= self.max_value:
            raise ValueError(f'Значение {value} должно быть меньше {self.max_value}')


class Student:
    age = Range(3, 103)
    grade = Range(1, 11 + 1)
    office = Range(3, 42 + 1)

    def __init__(self, name, age, grade, office):
        self.name = name
        self.age = age
        self.grade = grade
        self.office = office

    def __repr__(self):
        return f'Student(name={self.name}, age={self.age}, grade={self.grade}, office={self.office})'





if __name__ == '__main__':
    std_one = Student('Архимед', 12, 4, 29)
    # std_other = Student('Аристотель', 2406, 5, 17)  # ValueError: Значение 2406 должно быть меньше 103
    print(f'{std_one = }')
    std_one.age = 15
    print(f'{std_one = }')
    # std_one.grade = 11.0  # TypeError: Значение 11.0 должно быть целым числом
    # std_one.office = 73  # ValueError: Значение 73 должно быть меньше 42
    # del std_one.age  # AttributeError: Свойство "_age" нельзя удалять
    print(f'{std_one.__dict__ = }')

#При отправке кода на Выполнение раскомментируйте строку ниже, чтобы задать значения аргументов и вызвать функцию

#При отправке решения на Проверку закомментируйте эту строку обратно - система автоматически подставит разные значения аргументов и вызовет функцию для проверки

#student = Student("Иван Иванов", "subjects.csv")

#student.add_grade("Математика", 4)
#student.add_test_score("Математика", 85)

#student.add_grade("История", 5)
#student.add_test_score("История", 92)

#average_grade = student.get_average_grade()
#print(f"Средний балл: {average_grade}")

#average_test_score = student.get_average_test_score("Математика")
#print(f"Средний результат по тестам по математике: {average_test_score}")

#print(student)


student = Student("Петров Петр", "subjects.csv")

student.add_grade("Физика", 6)


Ожидаемый ответ:

ValueError: Оценка должна быть целым числом от 2 до 5

Ваш ответ:

TypeError: __init__() missing 2 required positional arguments: 'grade' and 'office'
Тест 4
Тест не пройден ✗

Формулировка:

* Итоговый код для проверки.


import warnings

warnings.filterwarnings('ignore')

# Введите ваше решение ниже

class Range:
    def __init__(self, min_value: int = None, max_value: int = None):
        self.min_value = min_value
        self.max_value = max_value

    def __set_name__(self, owner, name):    # Инкапсуляция. Добавляем ко всем именам "_"
        self.param_name = '_' + name

    def __get__(self, instance, owner):
        return getattr(instance, self.param_name)

    def __set__(self, instance, value):
        self.validate(value)
        setattr(instance, self.param_name, value)

    def __delete__(self, instance):
        raise AttributeError(f'Свойство "{self.param_name}" нельзя удалять')

    def validate(self, value):
        if not isinstance(value, int):
            raise TypeError(f'Значение {value} должно быть целым числом')

        if self.min_value is not None and value < self.min_value:
            raise ValueError(f'Значение {value} должно быть больше или равно {self.min_value}')

        if self.max_value is not None and value >= self.max_value:
            raise ValueError(f'Значение {value} должно быть меньше {self.max_value}')


class Student:
    age = Range(3, 103)
    grade = Range(1, 11 + 1)
    office = Range(3, 42 + 1)

    def __init__(self, name, age, grade, office):
        self.name = name
        self.age = age
        self.grade = grade
        self.office = office

    def __repr__(self):
        return f'Student(name={self.name}, age={self.age}, grade={self.grade}, office={self.office})'





if __name__ == '__main__':
    std_one = Student('Архимед', 12, 4, 29)
    # std_other = Student('Аристотель', 2406, 5, 17)  # ValueError: Значение 2406 должно быть меньше 103
    print(f'{std_one = }')
    std_one.age = 15
    print(f'{std_one = }')
    # std_one.grade = 11.0  # TypeError: Значение 11.0 должно быть целым числом
    # std_one.office = 73  # ValueError: Значение 73 должно быть меньше 42
    # del std_one.age  # AttributeError: Свойство "_age" нельзя удалять
    print(f'{std_one.__dict__ = }')

#При отправке кода на Выполнение раскомментируйте строку ниже, чтобы задать значения аргументов и вызвать функцию

#При отправке решения на Проверку закомментируйте эту строку обратно - система автоматически подставит разные значения аргументов и вызовет функцию для проверки

#student = Student("Иван Иванов", "subjects.csv")

#student.add_grade("Математика", 4)
#student.add_test_score("Математика", 85)

#student.add_grade("История", 5)
#student.add_test_score("История", 92)

#average_grade = student.get_average_grade()
#print(f"Средний балл: {average_grade}")

#average_test_score = student.get_average_test_score("Математика")
#print(f"Средний результат по тестам по математике: {average_test_score}")

#print(student)


student = Student("Сидоров Сидор", "subjects.csv")

average_history_score = student.get_average_test_score("Биология")


Ожидаемый ответ:

ValueError: Предмет Биология не найден

Ваш ответ:

TypeError: __init__() missing 2 required positional arguments: 'grade' and 'office'